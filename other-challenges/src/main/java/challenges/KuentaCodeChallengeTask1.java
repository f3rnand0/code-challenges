package technical.challenges;

import java.util.List;
import java.util.stream.Collectors;

public class KuentaCodeChallengeTask1 {

    public static void main(String[] args) {
        KuentaCodeChallengeTask1 so = new KuentaCodeChallengeTask1();
        System.out.println("balance Parenthesis: " + so.balance2("((())"));
        System.out.println("balance Parenthesis: " + so.balance2("()()"));
        System.out.println("balance Parenthesis: " + so.balance2("("));
//        System.out.println("balance Parenthesis: " + so.balance(
//                "()))))))))))))))))))))))()()))()))))))))()))))))()))()))))(()))))))))))))()))))))(()))))
//                ))" +
//                "))()()))))))))))))()))))(())()))))))(()))))()))))))()))()())))())))))))))))()))())(()()
//                ())" +
//                "()()())))))()))))())()))()))))))))))))))()())))()))))()))))))()))())()))())))(()))()))))
//                ))" +
//                "))())))())))(())()))))()((()))))))((((()())())())(())))))())())))))))())))))()(()))))())
//                ))" +
//                ")())))))()())())()))()))))))))()))))))))))()))))())))))(((()))))()))((())))())))))))()))
//                )" +
//                "()()())())))))())))())())))))(())())))))))())))()()))))))))))))(())())())))((()))))))(()
//                ))" +
//                ")()())))()))))(())))(())))))))))))))(())))(())()))))(()))())())))))))()())(()(())())))))
//                ))" +
//                "))))))))))))))))((()())))())))())))((()())))()))())()))))())()())))))))))))(()))))))))))
//                ))" +
//                "))()))))))()))))))))))))))))(()(()))(()))()))))))()))()()))))))))))()))())()))))())))()
//                ()" +
//                "()))()))))(())))))))))))))()()))))(())))()))))))()))()())()))())()())())))()()(()())))))
//                ()" +
//                "())))))))())))())))(())))())))))))()))))))))()((()(())))))))))(())))())))())))))))))()()
//                ))" +
//                ")()))))))))("));
        System.out.println("balance Parenthesis: " + so.balance2(
                "()))))))))))))))))))))))()()))()))))))))()))))))()))()))))(()))))))))))))()))))))(()))))))" +
                "))()()))))))))))))()))))(())()))))))(()))))()))))))()))()())))())))))))))))()))())(()()())" +
                "()()())))))()))))())()))()))))))))))))))()())))()))))()))))))()))())()))())))(()))()))))))" +
                "))())))())))(())()))))()((()))))))((((()())())())(())))))())())))))))())))))()(()))))())))" +
                ")())))))()())())()))()))))))))()))))))))))()))))())))))(((()))))()))((())))())))))))())))" +
                "()()())())))))())))())())))))(())())))))))())))()()))))))))))))(())())())))((()))))))(()))" +
                ")()())))()))))(())))(())))))))))))))(())))(())()))))(()))())())))))))()())(()(())())))))))" +
                "))))))))))))))))((()())))())))())))((()())))()))())()))))())()())))))))))))(()))))))))))))" +
                "))()))))))()))))))))))))))))(()(()))(()))()))))))()))()()))))))))))()))())()))))())))()()" +
                "()))()))))(())))))))))))))()()))))(())))()))))))()))()())()))())()())())))()()(()())))))()" +
                "())))))))())))())))(())))())))))))()))))))))()((()(())))))))))(())))())))())))))))))()()))" +
                ")()))))))))("));
    }

    public int balance(String str) {
        int numberOfLeftParenthesis = (int) str.chars().filter(c -> c == '(').boxed().count();
        int numberOfRightParenthesis = (int) str.chars().filter(c -> c == ')').boxed().count();
        return Math.abs(numberOfLeftParenthesis - numberOfRightParenthesis);
    }

    public int balance2(String str) {
        List<Integer> list = str.chars().filter(c -> c == '(').boxed().collect(Collectors.toList());
        char[] ch = str.toCharArray();
        int counterLeft = 0, counterRight = 0;
        char prev = ch[0];
        for (int i = 1; i < ch.length; i++) {
            if (prev == ch[i])
                counterLeft++;
            prev = ch[i];
        }
        return counterLeft;
    }

}
